-- DATA CLEANING PROJECT 

Select *
FROM layoffs;

-- STEP 1: REMOVE DUPLICATES
-- STEP 2: Standardize the DATA
-- STEP 3: Null values/blank values
-- STEP 4: Remove Any Columns


-- STAGING, basically copying the data to a new data without interfering with the actual data
CREATE TABLE layoffs_staging 
LIKE layoffs;

INSERT layoffs_staging 
SELECT *
FROM layoffs;

SELECT *, 
ROW_NUMBER() OVER(
PARTITION BY company, industry, total_laid_off, percentage_laid_off, `date`) AS row_num
FROM layoffs_staging;

WITH duplicate_cte AS
(
SELECT *, 
ROW_NUMBER() OVER(
PARTITION BY company, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
FROM layoffs_staging
)
SELECT *
FROM duplicate_cte
WHERE row_num > 1;

-- CREATE TABLE WITH ROW NUMBER STAGING 2

CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- CONFIRM TABLE COLLUMN 'row_num' INSERTED
SELECT *
FROM layoffs_staging2;

-- INSERT INFORMAITON FROM STAGING 1 to 2
INSERT INTO layoffs_staging2
SELECT *, 
ROW_NUMBER() OVER(
PARTITION BY company, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
FROM layoffs_staging;

-- CONFIRM INFORMATION
SELECT *
FROM layoffs_staging2;

-- FINDING DUPLICATES BASED ON ROW NUMBER 
SELECT *
FROM layoffs_staging2
WHERE row_num > 1;

-- DELETING DUPLICATES 
DELETE
FROM layoffs_staging2 
WHERE row_num > 1;




-- Standardizing Data
SELECT company, TRIM(company)
FROM layoffs_staging2;

-- REMOVING WHITE SPACE BEFORE 
UPDATE layoffs_staging2
SET company = trim(company);

-- LOCATING Industry similar to clean
SELECT distinct industry
FROM layoffs_staging2
ORDER BY 1;

-- Identified that crypto has multiples, using % to filter all that have CRYPTO

SELECT * 
FROM layoffs_staging2
WHERE industry LIKE 'Crypto%';

-- Updating Industry Crypto 

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

-- Checking Country
SELECT distinct country, TRIM(country)
FROM layoffs_staging2
WHERE country LIKE 'United States%'
ORDER BY 1;

-- UPDATING US with period

UPDATE layoffs_staging2
SET country = TRIM(trailing '.' FROM country)
WHERE country LIKE 'United States%';

-- Changing date column from text to date

SELECT `date`,
STR_TO_DATE(`date`, '%m/%d/%Y')
FROM layoffs_staging2;

-- APPLY UPDATE

UPDATE layoffs_staging2
SET `date` = str_to_date(`date`, '%m/%d/%Y');

-- CHANGING DATA TYPE of DATE from TEXT
ALTER TABLE layoffs_staging2 
MODIFY COLUMN `date` DATE; 

-- NULL and Blank Values
-- Locating null 

SELECT *
FROM layoffs_staging2 
WHERE total_laid_off IS NULL;

UPDATE layoffs_staging2
SET industry = NULL
WHERE industry = ' '; 

Select *
FROM layoffs_staging2 t1
JOIN layoffs_staging2 t2
	On t1.company = t2.company
    AND t1.location = t2.location
WHERE t1.industry IS NULL
AND t2.industry is NOT NULL;

UPDATE layoffs_staging2 t1
JOIN layoffs_staging2 t2
	On t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL
AND t2.industry is NOT NULL;
